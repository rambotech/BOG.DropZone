Release Notes:

2.3.1 -- 2022.03.15
* Added support for ReverseProxy use
  * New argument: --UseReverseProxy true|false
  * New argument: --KnownProxies ipaddr[,ipaddr[,..]]
* Changed example start_me.bat to show Windows multi-line command usage.
* Ref: https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-nginx?view=aspnetcore-6.0

2.3.0 -- 2022.03.09
* Added blob storage. Similar to reference key/value.  Use for non-volatile key/value: no limit on count or size imposed.
  ** Stored on file system instead of memory to survive app restarts.
  ** Not dropped when the drop zone is cleared.  Must be explicitly dropped using the blob/delete endpoint
  ** No expiration date for blobs. Size limit determined by ASP body size limit, not user controlled.
  ** Make main project use NET6.  Note: Travis CI breaks with this framework. Waiting for support on the CI pipeline.
* Now requrires a Raspberry Pi 3B+ or 4.  Microsoft made NET 6 only support ARM v7 or later, and retrofitted NET Core 3.1
  to only work on ARM v7 or later... or at least, my tests show that.

2.2.0 -- 2021.06.29
* Changed from queue to dictionary internally for more effective handling of expired payloads.
* Added an optional tracking query parameter to /api/payload/dropoff for the caller to later inquire whether the payload is still in the pickup queue.
* Added /api/payload/inquiry endpoint to check for a payload awaiting pickup, and optionally change the expiration time.
* Standardize argument name of expiresOn for all path and query arguments.
* Rebuild BOG.DropZone.Test for example / demo / validation.
* Update build target to 5.0.2 for Travis.

2.1.2 -- 2021.04.25
* Security update from BOG.SwissArmyKnife
* Target framework changed from .NET Core 2.1 to .NET5.0

2.1.1 -- 2021.01.04
* Add Metrics as endpoint, to override the default values at any time.

2.1.0 -- 2021.01.04
* Add DropReference as endpoint.

2.0.4 -- 2020.12.30
* Nuget Package updates only

2.0.3 -- 2020.11.16
* Attempt to fix a behavior difference between ARM and x64 for exclusive-or

2.0.2 -- 2020.10.07
* Fix a bug in url building in RestApiCalls.cs

2.0.1 -- 2020.09.30
* Version alignment with nuget projects

2.0.0 -- 2020.09.28
* Debut of global queue or targeted recipient queue for payloads within a dropzone.
* Some cleanup of the UI so it is not a default microsoft template.

1.9.4 -- 2020.02.15
* Add Travis CI build stuff
* Inadvertently assigned v2.0.0 in last push, should have been 1.9.3

1.9.3 -- 2020.01.08
* Update target framework to .NET Core 3.1
* inadvertently assigned v2.0.0

1.9.2 -- 2019.07.15
* Endpoint /api/heartbeat now returns the application's name and version fingerprint in a JSON response body.
* Raise request body max size on payload set and reference set to 100Mb (Kestrel level setting). 
  The properties MaxPayloadSize / MaxReferenceSize on the dropzone determine whether it is too large to add to the dropzone.
* Added a console testing application from another solution: good for demonstrating usage.
* Refactored the way the solution is organized.

1.9.1 -- 2019.05.29 -- Maintenance release

1.9.0 -- 2018.11.19 -- Breaking change
* API: Dropoff and SetReference now return 201 (Created) when successful: previously they returned 200 (OK).
* Client: Adjusted for 201 changes above to return HandleAs.OK.
* Client: Introduce new DataGramException for errors related to cryptography.
* Client: Introduce new enum value DataCompromised for indicating a corrupted datagram was received.
* Client: When 200 (OK) or 201 (Created) is returned by the API (HandleAs.OK), the content property contains the response body.
* Client: For exceptions, the exception property is hydrated with the details.
* Client: Standardize message and content property return pattern across dropzone methods.
* Client: Message is now hydrated with the server response status text, if provided, and when the status code response is not a 4xx or 5xx value.
* Client: Result has a new property CastType, which contains the C# class namespace to use to cast the Content property value as a C# object.
    When empty or missing, the content should be cast as a string.  Only GetStatistics and GetSecurityInfo currently use a non-string cast.

1.8.2 -- 2018.10.19
* All: security update for Microsoft.AspNetCore.All

1.8.1 -- 2018.10.02
* Client: Added ZoneName to DropZoneConfig class.
* Client: Removed DropZone name as an argument from methods.  Facilitates filtering of multiple sites with the same dropzone name.
* General: Update Dockerfile to use .NET Core 2.1 image base.

1.8.0 -- 2018.09.22
* Added UI shell for later work
* Added separate tokens for operational (AccessToken) and administrative (AdminToken) methods.
* Added middleware to ensure payload-too-large returns the standard 413 response code.
* Added an optional query parameter (expires) for SetReference.
* Added an optional query parameter (expires) to DropoffPayload.
* Added sort to the returned list of reference key names.
* Added Mvc route for home page without /Home path specified.
* Client: Added an optional expiraton parameter for a reference and a payload.
* Client: Added enumeration InvalidAuthentication to State in Result class for an auth failure specific (401) occurrence.
* Client: Corrected a problem with an instantiator (DropZoneConfig as argument) not working properly.

1.7.6 -- 2018.09.11
* (private -> public) Overload of instantiator with DropZoneConfig object parameter.

1.7.5 -- 2018.09.09
* Nuget package updates

1.7.4 -- 2018.09.09
* Add body size limit of 5Mb to Api calls for payload dropoff and set reference, and 1,024 for admin calls.
* Client: add DropZoneConfig class for configuration.
* Listening on both http and https ports now enabled.

1.7.3 -- 2018.08.29
* Refactor FailedAuthTokenWatch to ClientWatch, with simplier property structure.
* Remove 451 (Legal Reasons) return codes and use only 401 (Not Authorized) return codes.
  Separate return values provided a semaphore to attackers of when their attempts were being ignored or not.
  Now all attempts appear valid.
* Add overridable parameters for:
  ** Drop zone count
  ** Max failed attempts before lockout
  ** Lockout seconds of duration
* Created lockout logic that will return not authorized when a valid access token is provided during a lockout period.
  This can give the impression to brute force attackers that they still have not discovered the proper value.
* GetReference will now return a 204 response if the key does not exist.  Previously, it would have return a value of 
  empty string.

1.7.2 -- 2018.08.26
* Correct a path error for the api method Heartbeat

1.7.1 -- 2018.08.23
* Adds GetSecurity method for exposing client information.

1.7.0 -- 2018.07.31
* Security: Adds support for an optional access token in the client header.
* Adds 401 and 451 result codes for invalid access tokens.

1.6.1 -- 2018.07.10
* Add Clear method to remove only a dropzone

